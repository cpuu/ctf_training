
./retret:     file format elf32-i386


Disassembly of section .init:

08048334 <_init>:
 8048334:	53                   	push   ebx
 8048335:	83 ec 08             	sub    esp,0x8
 8048338:	e8 c3 00 00 00       	call   8048400 <__x86.get_pc_thunk.bx>
 804833d:	81 c3 c3 1c 00 00    	add    ebx,0x1cc3
 8048343:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 8048349:	85 c0                	test   eax,eax
 804834b:	74 05                	je     8048352 <_init+0x1e>
 804834d:	e8 6e 00 00 00       	call   80483c0 <__gmon_start__@plt>
 8048352:	83 c4 08             	add    esp,0x8
 8048355:	5b                   	pop    ebx
 8048356:	c3                   	ret    

Disassembly of section .plt:

08048360 <.plt>:
 8048360:	ff 35 04 a0 04 08    	push   DWORD PTR ds:0x804a004
 8048366:	ff 25 08 a0 04 08    	jmp    DWORD PTR ds:0x804a008
 804836c:	00 00                	add    BYTE PTR [eax],al
	...

08048370 <free@plt>:
 8048370:	ff 25 0c a0 04 08    	jmp    DWORD PTR ds:0x804a00c
 8048376:	68 00 00 00 00       	push   0x0
 804837b:	e9 e0 ff ff ff       	jmp    8048360 <.plt>

08048380 <sysconf@plt>:
 8048380:	ff 25 10 a0 04 08    	jmp    DWORD PTR ds:0x804a010
 8048386:	68 08 00 00 00       	push   0x8
 804838b:	e9 d0 ff ff ff       	jmp    8048360 <.plt>

08048390 <_IO_getc@plt>:
 8048390:	ff 25 14 a0 04 08    	jmp    DWORD PTR ds:0x804a014
 8048396:	68 10 00 00 00       	push   0x10
 804839b:	e9 c0 ff ff ff       	jmp    8048360 <.plt>

080483a0 <malloc@plt>:
 80483a0:	ff 25 18 a0 04 08    	jmp    DWORD PTR ds:0x804a018
 80483a6:	68 18 00 00 00       	push   0x18
 80483ab:	e9 b0 ff ff ff       	jmp    8048360 <.plt>

080483b0 <__libc_start_main@plt>:
 80483b0:	ff 25 1c a0 04 08    	jmp    DWORD PTR ds:0x804a01c
 80483b6:	68 20 00 00 00       	push   0x20
 80483bb:	e9 a0 ff ff ff       	jmp    8048360 <.plt>

Disassembly of section .plt.got:

080483c0 <__gmon_start__@plt>:
 80483c0:	ff 25 fc 9f 04 08    	jmp    DWORD PTR ds:0x8049ffc
 80483c6:	66 90                	xchg   ax,ax

Disassembly of section .text:

080483d0 <_start>:
 80483d0:	31 ed                	xor    ebp,ebp
 80483d2:	5e                   	pop    esi
 80483d3:	89 e1                	mov    ecx,esp
 80483d5:	83 e4 f0             	and    esp,0xfffffff0
 80483d8:	50                   	push   eax
 80483d9:	54                   	push   esp
 80483da:	52                   	push   edx
 80483db:	68 80 86 04 08       	push   0x8048680
 80483e0:	68 20 86 04 08       	push   0x8048620
 80483e5:	51                   	push   ecx
 80483e6:	56                   	push   esi
 80483e7:	68 80 85 04 08       	push   0x8048580
 80483ec:	e8 bf ff ff ff       	call   80483b0 <__libc_start_main@plt>
 80483f1:	f4                   	hlt    
 80483f2:	66 90                	xchg   ax,ax
 80483f4:	66 90                	xchg   ax,ax
 80483f6:	66 90                	xchg   ax,ax
 80483f8:	66 90                	xchg   ax,ax
 80483fa:	66 90                	xchg   ax,ax
 80483fc:	66 90                	xchg   ax,ax
 80483fe:	66 90                	xchg   ax,ax

08048400 <__x86.get_pc_thunk.bx>:
 8048400:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 8048403:	c3                   	ret    
 8048404:	66 90                	xchg   ax,ax
 8048406:	66 90                	xchg   ax,ax
 8048408:	66 90                	xchg   ax,ax
 804840a:	66 90                	xchg   ax,ax
 804840c:	66 90                	xchg   ax,ax
 804840e:	66 90                	xchg   ax,ax

08048410 <deregister_tm_clones>:
 8048410:	b8 2b a0 04 08       	mov    eax,0x804a02b
 8048415:	2d 28 a0 04 08       	sub    eax,0x804a028
 804841a:	83 f8 06             	cmp    eax,0x6
 804841d:	76 1a                	jbe    8048439 <deregister_tm_clones+0x29>
 804841f:	b8 00 00 00 00       	mov    eax,0x0
 8048424:	85 c0                	test   eax,eax
 8048426:	74 11                	je     8048439 <deregister_tm_clones+0x29>
 8048428:	55                   	push   ebp
 8048429:	89 e5                	mov    ebp,esp
 804842b:	83 ec 14             	sub    esp,0x14
 804842e:	68 28 a0 04 08       	push   0x804a028
 8048433:	ff d0                	call   eax
 8048435:	83 c4 10             	add    esp,0x10
 8048438:	c9                   	leave  
 8048439:	f3 c3                	repz ret 
 804843b:	90                   	nop
 804843c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

08048440 <register_tm_clones>:
 8048440:	b8 28 a0 04 08       	mov    eax,0x804a028
 8048445:	2d 28 a0 04 08       	sub    eax,0x804a028
 804844a:	c1 f8 02             	sar    eax,0x2
 804844d:	89 c2                	mov    edx,eax
 804844f:	c1 ea 1f             	shr    edx,0x1f
 8048452:	01 d0                	add    eax,edx
 8048454:	d1 f8                	sar    eax,1
 8048456:	74 1b                	je     8048473 <register_tm_clones+0x33>
 8048458:	ba 00 00 00 00       	mov    edx,0x0
 804845d:	85 d2                	test   edx,edx
 804845f:	74 12                	je     8048473 <register_tm_clones+0x33>
 8048461:	55                   	push   ebp
 8048462:	89 e5                	mov    ebp,esp
 8048464:	83 ec 10             	sub    esp,0x10
 8048467:	50                   	push   eax
 8048468:	68 28 a0 04 08       	push   0x804a028
 804846d:	ff d2                	call   edx
 804846f:	83 c4 10             	add    esp,0x10
 8048472:	c9                   	leave  
 8048473:	f3 c3                	repz ret 
 8048475:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
 8048479:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

08048480 <__do_global_dtors_aux>:
 8048480:	80 3d 44 a0 04 08 00 	cmp    BYTE PTR ds:0x804a044,0x0
 8048487:	75 13                	jne    804849c <__do_global_dtors_aux+0x1c>
 8048489:	55                   	push   ebp
 804848a:	89 e5                	mov    ebp,esp
 804848c:	83 ec 08             	sub    esp,0x8
 804848f:	e8 7c ff ff ff       	call   8048410 <deregister_tm_clones>
 8048494:	c6 05 44 a0 04 08 01 	mov    BYTE PTR ds:0x804a044,0x1
 804849b:	c9                   	leave  
 804849c:	f3 c3                	repz ret 
 804849e:	66 90                	xchg   ax,ax

080484a0 <frame_dummy>:
 80484a0:	b8 10 9f 04 08       	mov    eax,0x8049f10
 80484a5:	8b 10                	mov    edx,DWORD PTR [eax]
 80484a7:	85 d2                	test   edx,edx
 80484a9:	75 05                	jne    80484b0 <frame_dummy+0x10>
 80484ab:	eb 93                	jmp    8048440 <register_tm_clones>
 80484ad:	8d 76 00             	lea    esi,[esi+0x0]
 80484b0:	ba 00 00 00 00       	mov    edx,0x0
 80484b5:	85 d2                	test   edx,edx
 80484b7:	74 f2                	je     80484ab <frame_dummy+0xb>
 80484b9:	55                   	push   ebp
 80484ba:	89 e5                	mov    ebp,esp
 80484bc:	83 ec 14             	sub    esp,0x14
 80484bf:	50                   	push   eax
 80484c0:	ff d2                	call   edx
 80484c2:	83 c4 10             	add    esp,0x10
 80484c5:	c9                   	leave  
 80484c6:	e9 75 ff ff ff       	jmp    8048440 <register_tm_clones>

080484cb <cpy>:
 80484cb:	56                   	push   esi
 80484cc:	53                   	push   ebx
 80484cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
 80484d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
 80484d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
 80484d9:	85 c0                	test   eax,eax
 80484db:	74 13                	je     80484f0 <cpy+0x25>
 80484dd:	ba 00 00 00 00       	mov    edx,0x0
 80484e2:	0f b6 0c 16          	movzx  ecx,BYTE PTR [esi+edx*1]
 80484e6:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
 80484e9:	83 c2 01             	add    edx,0x1
 80484ec:	39 d0                	cmp    eax,edx
 80484ee:	75 f2                	jne    80484e2 <cpy+0x17>
 80484f0:	5b                   	pop    ebx
 80484f1:	5e                   	pop    esi
 80484f2:	c3                   	ret    

080484f3 <align>:
 80484f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
 80484f7:	05 ff 0f 00 00       	add    eax,0xfff
 80484fc:	25 00 f0 ff ff       	and    eax,0xfffff000
 8048501:	c3                   	ret    

08048502 <dummy>:
 8048502:	56                   	push   esi
 8048503:	53                   	push   ebx
 8048504:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
 8048508:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
 804850b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
 804850e:	d3 e3                	shl    ebx,cl
 8048510:	81 eb cd 80 c3 00    	sub    ebx,0xc380cd
 8048516:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
 8048519:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
 804851c:	d3 f8                	sar    eax,cl
 804851e:	89 c1                	mov    ecx,eax
 8048520:	81 c1 58 59 c3 00    	add    ecx,0xc35958
 8048526:	89 d8                	mov    eax,ebx
 8048528:	99                   	cdq    
 8048529:	f7 f9                	idiv   ecx
 804852b:	0f af d9             	imul   ebx,ecx
 804852e:	01 d8                	add    eax,ebx
 8048530:	2b 46 14             	sub    eax,DWORD PTR [esi+0x14]
 8048533:	8d 88 87 d9 c3 00    	lea    ecx,[eax+0xc3d987]
 8048539:	ba d9 8a de 53       	mov    edx,0x53de8ad9
 804853e:	89 c8                	mov    eax,ecx
 8048540:	f7 ea                	imul   edx
 8048542:	89 d0                	mov    eax,edx
 8048544:	c1 f8 0e             	sar    eax,0xe
 8048547:	89 ca                	mov    edx,ecx
 8048549:	c1 fa 1f             	sar    edx,0x1f
 804854c:	29 d0                	sub    eax,edx
 804854e:	69 c0 5a c3 00 00    	imul   eax,eax,0xc35a
 8048554:	29 c1                	sub    ecx,eax
 8048556:	89 c8                	mov    eax,ecx
 8048558:	5b                   	pop    ebx
 8048559:	5e                   	pop    esi
 804855a:	c3                   	ret    

0804855b <parse>:
 804855b:	81 ec 00 1e 00 00    	sub    esp,0x1e00 ; 7680
 8048561:	ff b4 24 08 1e 00 00 	push   DWORD PTR [esp+0x1e08]
 8048568:	ff b4 24 08 1e 00 00 	push   DWORD PTR [esp+0x1e08]
 804856f:	8d 44 24 08          	lea    eax,[esp+0x8]
 8048573:	50                   	push   eax
 8048574:	e8 52 ff ff ff       	call   80484cb <cpy> = memcpy
 8048579:	81 c4 0c 1e 00 00    	add    esp,0x1e0c
 804857f:	c3                   	ret    

08048580 <main>:
 8048580:	8d 4c 24 04          	lea    ecx,[esp+0x4] ; ecx = &argc
 8048584:	83 e4 f0             	and    esp,0xfffffff0 ; ...
 8048587:	ff 71 fc             	push   DWORD PTR [ecx-0x4] ; retaddr
 804858a:	55                   	push   ebp ; oldebp
 804858b:	89 e5                	mov    ebp,esp ; ...
 804858d:	57                   	push   edi ; ...
 804858e:	56                   	push   esi ; ...
 804858f:	53                   	push   ebx ; ...
 8048590:	51                   	push   ecx ; ...
 8048591:	83 ec 24             	sub    esp,0x24 ; frame alloc

 8048594:	6a 1e                	push   0x1e
 8048596:	e8 e5 fd ff ff       	call   8048380 <sysconf@plt>

    sz = sysconf(1e); // get page size

 804859b:	05 00 20 00 00       	add    eax,0x2000
 80485a0:	89 04 24             	mov    DWORD PTR [esp],eax
 80485a3:	e8 f8 fd ff ff       	call   80483a0 <malloc@plt>

    buf = malloc(sz + 8192); // ebp - 0x1c

 80485a8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
 80485ab:	83 c4 10             	add    esp,0x10
 80485ae:	85 c0                	test   eax,eax
 80485b0:	74 63                	je     8048615 <main+0x95>
 80485b2:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
 80485b8:	81 e7 00 f0 ff ff    	and    edi,0xfffff000

    ptr = (buf + 0xfff) & 0xfffff000

 80485be:	89 fb                	mov    ebx,edi
 80485c0:	8d b7 00 20 00 00    	lea    esi,[edi+0x2000] ; maxidx
 80485c6:	83 ec 0c             	sub    esp,0xc
 80485c9:	ff 35 40 a0 04 08    	push   DWORD PTR ds:0x804a040 ; stdin
 80485cf:	e8 bc fd ff ff       	call   8048390 <_IO_getc@plt> = getc

   for(i=0; i < 8192; i++)
     ptr[i] = getc(stdin);

 80485d4:	88 03                	mov    BYTE PTR [ebx],al
 80485d6:	83 c3 01             	add    ebx,0x1
 80485d9:	83 c4 10             	add    esp,0x10

 80485dc:	39 f3                	cmp    ebx,esi
 80485de:	75 e6                	jne    80485c6 <main+0x46>

 80485e0:	80 3f 42             	cmp    BYTE PTR [edi],0x42
 80485e3:	74 11                	je     80485f6 <main+0x76>

   if (ptr[0] != 0x42) {
      parse();
   }
   free(buf);
   return;


 80485e5:	83 ec 08             	sub    esp,0x8
 80485e8:	68 00 20 00 00       	push   0x2000
 80485ed:	57                   	push   edi
 80485ee:	e8 68 ff ff ff       	call   804855b <parse>
 80485f3:	83 c4 10             	add    esp,0x10

 80485f6:	83 ec 0c             	sub    esp,0xc
 80485f9:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
 80485fc:	e8 6f fd ff ff       	call   8048370 <free@plt>
 8048601:	83 c4 10             	add    esp,0x10
 8048604:	b8 00 00 00 00       	mov    eax,0x0
 8048609:	8d 65 f0             	lea    esp,[ebp-0x10]
 804860c:	59                   	pop    ecx
 804860d:	5b                   	pop    ebx
 804860e:	5e                   	pop    esi
 804860f:	5f                   	pop    edi
 8048610:	5d                   	pop    ebp
 8048611:	8d 61 fc             	lea    esp,[ecx-0x4]
 8048614:	c3                   	ret    
 8048615:	b8 ff ff ff ff       	mov    eax,0xffffffff
 804861a:	eb ed                	jmp    8048609 <main+0x89>
 804861c:	66 90                	xchg   ax,ax
 804861e:	66 90                	xchg   ax,ax

08048620 <__libc_csu_init>:
 8048620:	55                   	push   ebp
 8048621:	57                   	push   edi
 8048622:	56                   	push   esi
 8048623:	53                   	push   ebx
 8048624:	e8 d7 fd ff ff       	call   8048400 <__x86.get_pc_thunk.bx>
 8048629:	81 c3 d7 19 00 00    	add    ebx,0x19d7
 804862f:	83 ec 0c             	sub    esp,0xc
 8048632:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
 8048636:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 804863c:	e8 f3 fc ff ff       	call   8048334 <_init>
 8048641:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 8048647:	29 c6                	sub    esi,eax
 8048649:	c1 fe 02             	sar    esi,0x2
 804864c:	85 f6                	test   esi,esi
 804864e:	74 25                	je     8048675 <__libc_csu_init+0x55>
 8048650:	31 ff                	xor    edi,edi
 8048652:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 8048658:	83 ec 04             	sub    esp,0x4
 804865b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 804865f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
 8048663:	55                   	push   ebp
 8048664:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 804866b:	83 c7 01             	add    edi,0x1
 804866e:	83 c4 10             	add    esp,0x10
 8048671:	39 fe                	cmp    esi,edi
 8048673:	75 e3                	jne    8048658 <__libc_csu_init+0x38>
 8048675:	83 c4 0c             	add    esp,0xc
 8048678:	5b                   	pop    ebx
 8048679:	5e                   	pop    esi
 804867a:	5f                   	pop    edi
 804867b:	5d                   	pop    ebp
 804867c:	c3                   	ret    
 804867d:	8d 76 00             	lea    esi,[esi+0x0]

08048680 <__libc_csu_fini>:
 8048680:	f3 c3                	repz ret 

Disassembly of section .fini:

08048684 <_fini>:
 8048684:	53                   	push   ebx
 8048685:	83 ec 08             	sub    esp,0x8
 8048688:	e8 73 fd ff ff       	call   8048400 <__x86.get_pc_thunk.bx>
 804868d:	81 c3 73 19 00 00    	add    ebx,0x1973
 8048693:	83 c4 08             	add    esp,0x8
 8048696:	5b                   	pop    ebx
 8048697:	c3                   	ret    
